<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="building">
<info>
  <?db filename="ch-building"?>
  <title>Building the stylesheets</title>
</info>

<para>If you wish, you can also clone the distribution and build them
yourself. The distribution is designed to be self contained. In a Unix
or Mac environment, running:
</para>

<screen><?db verbatim-style="plain"
?><userinput>./gradlew dist</userinput></screen>

<para>
will build the stylesheets. Building will:</para>

<orderedlist>
<listitem>
<para>Compile the stylesheets and run the unit tests. The compiled stylesheets
will be available in <filename>build/xslt</filename>.
</para>
<para>Running all the tests requires building the reference guide and
a few other things. You can build the stylesheets without running any
of the tests with the <buildtarget>makeXslt</buildtarget> task.</para>
</listitem>
<listitem>
<para>Compile the extension functions. The compiled extension functions will be
available in <filename>build/libs</filename>. The <buildtarget>jar</buildtarget> task
will compile the extensions without running the tests.
</para>
</listitem>
<listitem>
<para>“Compile” <link linkend="python-script">the Python script</link> that helps run
the stylesheets. (It’s not really compiled, but several stylesheet-version-specific
strings are interpolated.)
The <buildtarget>copyBin</buildtarget> task will setup the Python script
without running the tests.
</para>
</listitem>
</orderedlist>

<important>
<para>In principle, it should be possible to build the stylesheets on <trademark>Windows</trademark>.
In practice, it doesn’t work. One would imagine that mapping path (“:”→“;”)
and filename (“\”→“/”) separators and constructing URIs for paths
(“<literal>C:\Users\…</literal>”→“<literal>file:///C:/Users/…</literal>”) would
make it work. In the author’s experience, that is not the case. Pull requests are welcome.
It may be more expedient to build in the Linux subsystem on Windows 10 or in a Docker
container.
</para>
</important>

<section xml:id="buildpre">
<title>Prerequisites</title>

<para>In order to build the stylesheets, you must configure your
system with several prerequisites:</para>

<itemizedlist>
<listitem>
<para><link xlink:href="https://gradle.org/">Gradle</link>. The stylesheet
builds use <link xlink:href="https://docs.gradle.org/current/userguide/gradle_wrapper.html">the
Gradle wrapper</link> to assure a consistent environment across systems, it’ll
be downloaded automatically the first time you build.
</para>
</listitem>
<listitem>
<para>A modern version of Java. (Java 1.8 or later, for example.)
</para>
</listitem>
<listitem>
<para><link xlink:href="https://www.python.org/">Python</link> 3 and
the <link xlink:href="https://click.palletsprojects.com/en/7.x/">click</link> module.
The <link xlink:href="https://pygments.org/">Pygmentize</link> program is also
required for syntax highlighting, though that’s not technically a build requirement.
</para>
</listitem>
</itemizedlist>

<para>If you discover other prerequisites that have been overlooked,
or have questions or suggestions about how best to manage them, please
let us know.</para>

<section xml:id="saxonee">
<title>Saxon EE</title>
<para>You don’t need a Saxon EE license to build or run the stylesheets.
If you change any of the transforms in <code>src/main/xslt/transforms</code>,
you will need a Saxon EE license to recompile them as exported SEF files.</para>
<para>If you don’t have an EE license, the build process will simply
omit the SEF versions and the “source” versions, including any
modifications that you’ve made, will be used.</para>
<para>That’s the theory, anyway. I’ve tested it, but if you have any trouble, please
open an issue.</para>
</section>
</section>
<section xml:id="repostruct">
<title>Repository structure</title>

<para>The most significant parts of the repository hierarchy are:</para>

<screen role="monochrome">src/main/xslt
src/main/xslt/transforms
src/main/xslt/modules</screen>

<para>These are the sources for the stylesheets themselves. The
<dir>transform</dir> subdirectory contains the preprocessing
stylesheets that are run as separate transforms. The
<dir>modules</dir> directory doesn’t have any special significance, it
just makes the main entry points easier to find.</para>

<para>You cannot run the XSLT stylesheets directly from the source
location. You must build them first with the
<buildtarget>makeXslt</buildtarget> build target.</para>

<screen role="monochrome">src/main/web
src/main/web/resources/css
src/main/web/resources/js</screen>

<para>These are the CSS and JavaScript files needed for accurate rendering in the
browser or formatter process.</para>

<screen role="monochrome">src/main/locales/locale-10
src/main/locales/locale</screen>

<para>The <dir>local-10</dir> directory holds copies of the
localization files from the XSLT 1.0 stylesheets. They’re transformed
into the <dir>locale</dir> versions by the build system. This whole
area is one that needs work.</para>

<screen role="monochrome">src/test/xspec
src/test/generators
src/test/resources/xml
src/test/resources/expected</screen>

<para>These are the testing resources. You cannot run the XSpec tests
directly from <dir>src/test/xspec</dir>. The build system copies them into
<dir>build/xspec</dir> along with a few XSpec tests generated
automatically by the stylesheets in <dir>generators</dir>.
</para>

<para>The library of DocBook documents that are used for testing is
stored in the <dir>xml</dir> directory. The HTML files in
<dir>expected</dir> correspond to the expected results. The expected
results aren’t usefully viewed in a browser. Only the
<tag namespace="http://www.w3.org/1999/xhtml">body</tag> element and its
decendants are stored in the expected results. This avoids a lot of
noise in the
<tag namespace="http://www.w3.org/1999/xhtml">head</tag>.</para>

<screen role="monochrome">src/main/java</screen>

<para>These are the sources for the <link
linkend="extensions">extension functions</link>.
</para>

<screen role="monochrome">src/guide
src/website</screen>

<para>These are the sources, resources, and ancillary files for the 
reference guide and the website.</para>

<screen role="monochrome">tools</screen>

<para>The <dir>tools</dir> directory holds a number of stylesheets and other scripts used
by the build process.</para>

<screen role="monochrome">lib</screen>

<para>The <dir>lib</dir> directory holds third party jar files. This is also where
you can put your Saxon PE or EE files if you have them.</para>

<screen role="monochrome">build
build/actual
build/xslt</screen>

<para>The build system puts all of its temporary files under <dir>build</dir>. It’s
always safe to delete the entire directory and start over, though it will require internet
access and it may take a while.</para>

<para>Test files that you format are published to
<dir>build/actual</dir> and the images, CSS, and JavaScript resources
are copied under there so that everything will look right in the
browser. For security reasons, some JavaScript features may not work
if you are looking at the documents from the filesystem. You can work
around this by pointing a local web server at the build directory.</para>

<para>The built stylesheets are in <dir>build/xslt</dir>. You can run
them directly from there.</para>
</section>

<section xml:id="buildtasks">
<title>Build tasks</title>

<para>The build system is <biblioref linkend="Gradle"/>. Gradle’s
processing model operates in several phases, this allows an initial
configuration phase to construct build targets (called tasks)
dynamically. The <citetitle>DocBook xslTNG Stylesheets</citetitle>
build script uses this facility quite a bit.</para>

<para>In the discussion that follows, <replaceable>testdoc</replaceable> is the
base name of a test document, that is, one of the example files from the
<dir>src/test/resources/xml</dir> directory. For example, one of the test documents
is <filename>src/test/resources/xml/article.001.xml</filename>. In the build
targets that would be the “testdoc” <literal>article.001</literal>.
In an analogous way, “testset” is the root name of an XSpec test file in
<dir>src/test/xspec</dir>.</para>

<para>The most important tasks are:</para>

<variablelist>
<varlistentry><term><buildtarget>makeXslt</buildtarget></term>
<listitem>
<para>This tasks “compiles” the stylesheets into <dir>build/xslt</dir>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>report</buildtarget></term>
<listitem>
<para>This task runs all of the tests and generates a unified report in
<dir>build/report</dir>. This is the default task.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>test</buildtarget></term>
<listitem>
<para>Runs the test suite against the stylesheets.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>jar</buildtarget></term>
<listitem>
<para>Compiles the extension functions and creates the jar file in
<dir>build/libs</dir>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>dist</buildtarget></term>
<listitem>
<para>Builds an archive in <dir>build/distributions</dir> suitable for distribution.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>guide</buildtarget></term>
<listitem>
<para>Builds the reference guide.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>website</buildtarget></term>
<listitem>
<para>Builds the website.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>explorer</buildtarget></term>
<listitem>
<para>Generates the <link xlink:href="https://xslt.xmlexplorer.com/">XSLT Explorer</link>
report for the stylesheets in
<filename class="directory">build/explorer</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget>helloWorld</buildtarget></term>
<listitem>
<para>A smoke test target. It just prints a message, but doing so will exercise
a bunch of the build machinery in Gradle.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="testingtasks">
<title>Testing tasks</title>

<para>The way tests are managed was completely refactored in version 2.0.13. The new
system is largely automatic.</para>

<orderedlist>
<listitem>
<para>Create a new test document in <filename>src/test/resources/xml</filename>. For this
example, we’ll create <filename>para.003.xml</filename>, an example of a <tag>sidebar</tag>
in a <tag>para</tag>.
</para>
</listitem>
<listitem>
<para>Use the build target <buildtarget>para.003.html</buildtarget> to format the document.
This build target (and several others) exist automatically because the source file has
been created.</para>
</listitem>
<listitem>
<para>Inspect the results (in <filename>build/actual/para.003.html</filename>) and adjust
the stylesheets until you are satisfied that the results are correct. Each time you make a
stylesheet change, you can re-run the <buildtarget>para.003.html</buildtarget> target to
rebuild the output.</para>
</listitem>
<listitem>
<para>When you are satisified, run <buildtarget>param.003.expected</buildtarget> to
update the expected results.</para>
</listitem>
<listitem>
<para>Run the <buildtarget>report</buildtarget> target to make sure no other tests have broken
as a result of your changes.</para>
</listitem>
</orderedlist>

<para>More generally, the following targets exist for any source document in 
<filename>src/test/resources/xml</filename>:</para>

<variablelist>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.html</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML and stores the result
in <dir>build/actual</dir> where it can be viewed in the browser with the appropriate
CSS, JavaScript, images, etc.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.expected</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML and stores the result
in <dir>src/test/resources/expected</dir>. You should <emphasis>only</emphasis> run this
task when you’ve made a change and determined that the new results are correct and should
replace the previously expected results.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.pdf.html</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML suitable
for paged media and stores the result in <dir>build/actual</dir>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.pdf</buildtarget></term>
<listitem>
<para>The <ext>.pdf</ext> target will generate the
<ext>.pdf.html</ext> output and then attempt to transform it into PDF
with either AntennaHouse or PrinceXML. Additional configuration may be
necessary to get this to work.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testdoc</replaceable>.chunk</buildtarget></term>
<listitem>
<para>Formats <replaceable>testdoc</replaceable> into HTML with chunking turned
on. The result is stored in <filename>index.html</filename> and other files
in <dir>build/actual</dir>. No attempt is made to avoid having
the output files from different documents overwrite each other. At the moment,
none of the automated tests create chunked output.
</para>
</listitem>
</varlistentry>
<varlistentry><term><buildtarget><replaceable>testset</replaceable>.xspec</buildtarget></term>
<listitem>
<para>Runs the <replaceable>testset</replaceable> set of XSpec tests.
The test sets that are available are the sets constructed from build environments and
the sets created by hand (in <filename>src/test/xspec</filename>).a
</para>
</listitem>
</varlistentry>
</variablelist>

</section>

<section xml:id="xspec">
<title>Running XSpec</title>

<para>In order to get consistent results across different runs and in different
environments, the XSpec tests run a driver stylesheet, <filename>xspec-driver.xsl</filename>.
</para>

<para>Note also that the XSpec shell script is modified by the stylesheets.</para>

</section>
</chapter>
