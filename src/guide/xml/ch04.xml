<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="implementation">
<info>
  <?db filename="ch04.html"?>
  <title>Implementation details</title>
</info>

<para>This section sketches out some features of the implementation.
It would probably be better to build an annotated
<link xlink:href="https://tdg.docbook.org/">Definitive Guide</link> or
something, but this will have to do for now.
</para>

<section xml:id="custom-chunking">
<title>Customizing chunking</title>

<para>Chunking is controlled by the <parameter>chunk-include</parameter> and
<parameter>chunk-exclude</parameter> parameters. These parameters are both
strings that must contain an XPath expression.</para>

<para>For each node in the document, the <parameter>chunk-include</parameter>
parameter is evaluated. If it does not return an empty sequence, the element
is considered a chunking candidate. In this case, the
<parameter>chunk-exclude</parameter> parameter is evaluated. If the exclude
expression <emphasis>does</emphasis> return an empty sequence, then the element identified
becomes a chunk. (If the exclude expression returns a non-empty value, the element
will not become a chunk.)</para>

</section>

<section xml:id="units">
<title>Lengths and units</title>

<para>Lengths appear in the context of images (width and height) and
tables (column widths). Several different units of length are
possible: absolute lengths (e.g., 3in), relative lengths (e.g., 3*),
and percentages (e.g., 25%). In some contexts, these can be combined:
a column width of “3*+0.5in” should have a width equal to 3 times the
relative width plus ½ inch.</para>

<para>In practice, some of the more complicated forms in <biblioref
linkend="calstable"/> have no direct mapping to the units available in
HTML and CSS. The stylesheets attempt to specify a mapping that’s
close. Broadly, they take the nominal width of the table
(<parameter>nominal-page-width</parameter>, subtract out the fixed
widths, divide up the remaining widths proportionally among the
relative widths, and compute final widths. The final widths can be
expressed either in absolute terms or as percentages.</para>

<para>In handling the width and height of images, the intrinsic width
and height of the image in pixels are converted into lengths by
dividing by <parameter>pixels-per-inch</parameter>. Nominal widths are
taken into consideration if necessary.</para>

<note>
<para>Determining the intrinsic size of an image depends on an extension function.
See <xref linkend="extensions"/>. Many bitmap image formats are supported.
The bounding box of EPS images is used, if it’s present. The intrinsic size of
SVG images is not available.</para>
</note>

<para>The list of recognized units (in, cm, etc.) are taken from
<varname>v:unit-scale</varname>.</para>
</section>

<section xml:id="verbstyle">
<title>Verbatim styles</title>

<para>There are four verbatim styles: <literal>lines</literal>, <literal>table</literal>,
<literal>plain</literal>, and <literal>raw</literal>.</para>

<variablelist>
<varlistentry><term><literal>lines</literal></term>
<listitem>
<para>In the lines style, each line of the verbatim environment is
marked up individually. In this style, lines can be numbered and
callouts can be inserted.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>table</literal></term>
<listitem>
<para>In the table style, each line of the verbatim environment is
marked up individually, very much like the lines style. In this style,
lines can be numbered and callouts can be inserted. It differs from
the lines style in that the whole thing is wrapped in a table.</para>

<para>The table has one row and two columns. The line numbers appear in the
first column, the lines in the second. This format was added in order
to improve the display in user agents that don’t support CSS.
Ironically, in the course of adding this style, a number of changes
were made to the way line numbers are formatted in the lines style
making it largely, perhaps entirely, unnecessary.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>plain</literal></term>
<listitem>
<para>In the plain style, callouts can be inserted, but additional markup is not
added (except for the callouts). Consequently, it isn’t possible to do line numbering
or syntax highlighting. (It may be possible to provide these features with JavaScript
libraries in the browser, however.)
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>raw</literal></term>
<listitem>
<para>In the raw style, no changes are made to the verbatim content. It’s output as
it appears. Inline markup that it contains, <tag>emphasis</tag> or other elements, will
be processed, but you cannot add line numbers, callouts, or syntax highlighting.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Consult <xref linkend="params"/> for a variety of parameters that control
aspects of verbatim processing.</para>

<section xml:id="line-numbers">
<title>Line numbers</title>

<para>In the <literal>lines</literal> and <literal>table</literal> styles, line
numbers may be added to the beginning of some (or all) lines. Prior to version
1.10.0, the stylesheets inserted the numbers without any padding:</para>

<programlisting language="xml"><![CDATA[<span class="line">
  <span class="ln">5</span>
  <span class="ld">The line of text</span>
</span>]]></programlisting>

<para>(The newlines and indentation in these examples are for clarity. In practice, these
are inside a <tag namespace="http://www.w3.org/1999/xhtml">pre</tag> where every
space counts and they’re all run together with line breaks only occurring
between lines.)</para>

<para>In a graphical browser with CSS support, this looked fine. But
without CSS, the line numbers and the text that followed them could
flow together and the alignment of the numbers was unclear.</para>

<para>Starting in version 1.10.0, the stylesheets insert padding
spaces before each number so that they will all be aligned. If the
largest line number is three digits long, every number smaller than
100 will be padded to a width of three characters. A single space is
added after the number to separate it from the text that follows.
An additional separator may also be inserted, as shown here.</para>

<programlisting language="xml"><![CDATA[<span class="line">
  <span class="ln"> 5 <span class="nsep">|</span></span>
  <span class="ld">The line of text</span>
</span>]]></programlisting>

<para>These changes have no visible effect when CSS is used to style
the verbatim environment. But without CSS, the numbers are aligned and
separated from the text that follows. The
<parameter>verbatim-number-separator</parameter> is generally
suppressed by CSS, but is visible in text browsers.</para>

</section>
</section>

<section xml:id="mediaobject-uris">
<title>Mediaobject URIs</title>

<para>Media object (images, video, audio) URIs are tricky to handle. It’s most
convenient if the URIs in the source documents point to the actual media files.
This allows extensions, like the image properties
<link linkend="extensions">extension function</link>, to access the files.
At the same time, the references generated in the HTML have to point to the
locations where they will be published.</para>

<para>The stylesheets attempt to handle this by using
<parameter>mediaobject-input-base-uri</parameter> to locate the files from the
XML sources and <parameter>mediaobject-output-base-uri</parameter> to create
the HTML links.</para>

<para>If you need a completely different organization of images in the
input and output, you may need to define your own <function>f:resolve-object-uri</function>
function.</para>

</section>

<section xml:id="header-templates">
<title>Templates</title>

<para>It’s difficult to make title pages for documents easy to customize. There
is <emphasis>a lot</emphasis> of variation between documents and the styles can
have very precise design constraints. At the end of the day, if you need complete control,
you can define a template that matches the element in the
<mode>m:generate-titlepage</mode> mode and generate all of the markup you wish.</para>

<para>The default title page handling attempts to make some declarative customization
possible by using templates. A typical header template looks like this:</para>

<programlisting language="xml"><![CDATA[<db:section>
  <header>
    <tmp:apply-templates select="db:title">
      <h2><tmp:content/></h2>
    </tmp:apply-templates>
    <tmp:apply-templates select="db:subtitle">
      <h3><tmp:content/></h3>
    </tmp:apply-templates>
  </header>
</db:section>]]></programlisting>

<para>Any HTML element in the template will be copied to the output. The semantics
of a “template apply templates” element (<tag>tmp:apply-templates</tag>) is that
it runs the ordinary <tag>xsl:apply-templates</tag> instruction on the elements that
match its select expression. If they result is the empty sequence (e.g, if there is no 
<tag>subtitle</tag>), nothing is output. If there is a result, the content of the
<tag>tmp:apply-templates</tag> element is processed. Anywhere that
<tag>tmp:content</tag> appears, the result of applying templates will be output.</para>

<para>In this example, if the title is “H<subscript>2</subscript>O” and there is no subtitle,
the resulting HTML title page will be:</para>

<programlisting language="xml"><![CDATA[<header>
  <h2>H<sub>2</sub>O</h2>
</header>]]></programlisting>
</section>

<section xml:id="annotations">
<title>Annotations</title>

<para>The stylesheets fully support annotations, including a number
of presentation styles enabled by JavaScript in the browser. They also
support an extension of the documented semantics of
<tag>annotation</tag>.</para>

<para>Annotations are applied to elements with links. Either the
element must point to its annotations (with an <att>annotations</att>
attribute) or the annotations must point to the elements they annotate
(with an <att>annotates</att> attribute). These are documented as
ID/IDREF links but they are not <code>IDREFS</code> attributes
because annotations may be stored separately.</para>

<para>Starting in version 1.5.1, the <citetitle>DocBook xslTNG
Stylesheets</citetitle> support a non-standard extension: if you place
the string <code>xpath:</code> in the <att>annotates</att> attribute of
an <tag>annotation</tag>, then the rest of the attribute is assumed to contain
an XPath expression that points to the element(s) to which the annotation
applies. (If you want to put IDREF values before the <code>xpath:</code> token,
that’s fine, but you can’t put them after; the expression continues to the end
of the attribute value.)</para>

<para>Suppose, for example, that you wanted to annotate the stylesheet
title in the previous paragraph. The standard mechanisms would require that
you either put an <att>xml:id</att> attribute on the element or point to the
annotation from the element. With the XPath extension, you can do this:</para>

<annotation annotates="xpath:preceding-sibling::db:para/db:citetitle"
            xmlns:db="http://docbook.org/ns/docbook">
<para>This annotation applies to the stylesheet title. For a discussion
of this annotation, see the following paragraphs.
</para>
</annotation>

<programlisting><![CDATA[<annotation
   annotates="xpath:preceding-sibling::db:para/db:citetitle"
   xmlns:db="http://docbook.org/ns/docbook">
<para>This annotation applies to the stylesheet title.
For a discussion of this annotation, see the
following paragraphs.</para>
</annotation>]]></programlisting>

<para>When the XPath expression is evaluated, the <tag>annotation</tag>
element is the context item. Often, this means that you’ll want to start
the expression with <code>id()</code> or <code>/</code>.</para>

<para>The namespace context for the expression is also the <tag>annotation</tag>
element, that’s why I’ve added the DocBook namespace binding for the
<tag class="prefix">db</tag> prefix. In practice, if you’re doing this on
several annotations, you can just put all the namespace bindings on a common
ancestor. All of the bindings <emphasis>in scope</emphasis> on the
<tag>annotation</tag> element are available in the expression.</para>

<para>Caveats:</para>

<orderedlist>
<listitem>
<para>There’s no way to have multiple XPath expressions. You can’t put
“<code>xpath:</code>” in there twice. If you want an annotation to apply to
multiple elements, you’ll have to construct a single expression that selects
all the elements, or duplicate the annotation, or use ID/IDREF links.</para>
<para>If this turns out to be a serious limitation in practice, additional
syntax could be added to support multiple expressions, but it doesn’t
<emphasis>seem</emphasis> necessary.</para>
</listitem>
<listitem>
<para>You can only select elements. There’s no way to select the third word
in a particular paragraph, for example, unless it already has some markup
around it. There’s also no way to select a comment or a processing instruction.
</para>
</listitem>
</orderedlist>

<para>The placement of the annotation marker (“⌖” by default) can also be
controlled globally and on individual annotations. The
<parameter>annotation-placement</parameter> parameter provides global control.
To specify the position for an individual annotation, put the token
“<code>before</code>” or “<code>after</code>” in the <att>role</att>
attribute on the <tag>annotation</tag>.</para>

</section>
</chapter>
